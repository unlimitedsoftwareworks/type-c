#!/usr/bin/env node

import { exit } from "process";
import { TypeC } from "./compiler";
import fs from "fs";
import path from "path";

const args = process.argv.slice(2); // Remove the first two elements

const compilerVersion = "0.0.1";

interface RunTestsOptions {
    // Add specific options for the run-tests command here
}

function initProject(folder: string) {
    const folderPath = path.resolve(folder);

    // Check if the folder already exists
    if (fs.existsSync(folderPath)) {
        // Check if the folder is empty
        const isEmpty = fs.readdirSync(folderPath).length === 0;
        if (!isEmpty) {
            console.error(
                `Error: The folder '${folderPath}' is not empty. Aborting project initialization.`,
            );
            process.exit(1);
        }
    } else {
        // Create the folder recursively if it does not exist
        fs.mkdirSync(folderPath, { recursive: true });
    }

    // Folder is either newly created or empty, proceed with initialization
    let folderName = path.basename(folderPath);

    // Create 'module.json' with the specified contents
    let moduleContent = {
        name: folderName,
        version: "1.0.0",
        author: "Your Name",
        dependencies: [],
        description: "Generated by Type-C CLI",
        compiler: {
            target: "runnable",
            entry: "main.tc",
        },
    };
    fs.writeFileSync(
        path.join(folderPath, "module.json"),
        JSON.stringify(moduleContent, null, 2), // Pretty print JSON
        "utf-8",
    );

    // Create 'main.tc' with the default content
    const mainTcContent = `from std.string import String
from std.io import println

fn main() -> u32 {
   println("hello, world!")
   return 0
}
    `;
    fs.writeFileSync(
        path.join(folderPath, "main.tc"),
        mainTcContent.trim(),
        "utf-8",
    );

    console.log(`Initialized a new project in: ${folderPath}`);
}

function parseCompileOptions(args: string[]): TypeC.CompileOptions {
    const compileIndex = args.findIndex(
        (arg) => arg === "--compile" || arg === "-c",
    );
    const dir =
        compileIndex !== -1 && args[compileIndex + 1]
            ? args[compileIndex + 1]
            : "";

    const generateBinaries = !args.includes("--no-generate-binaries");

    const outputIndex = args.findIndex(
        (arg) => arg === "--output" || arg === "-o",
    );
    const outputFolder =
        outputIndex !== -1 && args[outputIndex + 1]
            ? args[outputIndex + 1]
            : "default_output_folder";

    const runOutput = args.includes("--run") || args.includes("-r");

    const generateIR = args.includes("--generate-ir") || args.includes("-g");

    const noWarnings = args.includes("--no-warnings") || args.includes("-nw");

    return {
        dir,
        generateBinaries,
        outputFolder,
        runOutput,
        generateIR,
        noWarnings,
    };
}

function parseRunTestsOptions(args: string[]): RunTestsOptions {
    // Parse options specific to the run-tests command
    return {};
}

function printHelp() {
    console.log(`

    ████▓▓▓▓▓▓▓▒▓▓▓▓▒▓▓▓▓▓▓▓▓▓▒▓▓▓▓▓▓▓▓▓▒▓▓▓▓▓▓▒▓▓▓▓▓▓▓▓▓▒▓▓▓▓▓▒▓▓▓▓▓▒▓▓▓▓▓▓▓▒▓▓▓▓▓▓▓▓▒▓▓▓▓▒▓▓▓▓▓▓▓█████
    █▒██▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒░▒▒▒▒▒░▒▒▒▒▓░▓▒▒▒▒▒▒░▒▒▒▒▒▒▒▒░▒▓▓▓▓████████████
    █▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░░░░░░░░░░░░░░░░░░░▓██████▓▒░░░  ░▓████
    █▒██▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒░▒▒▒▒▒░▒▒▒▒▒░▒▒▒▒▒▒▒░▒▒▓█████▓             ████
    █▒██▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▓▓▓██████▒▒▒▒▒▒░▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒░▒▒▒▒▒░▒▒▒▒▓▒▓▓█████████████▒             ░████
    █▒██▒▒▒▒▒▒▒░▓▓██████████▓▒▒▒██▒▒▒▒▒▒░▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒░▒▓▓███████████▓▒████░█░████░    ▒▒▓▓▒░   ░████
    █▓██▓███████████▒░░░       ▓█▓▒▒▒▒▒▒░▒▒▒▒▒▒░▒▒▓████████████▓▒░░░     ░██████████▓    ▒████▓    ▒████
    ███████▓▒░               ░░██▓▒▒▒▒▒▓▒▓██████████▓▒░░░▒████          ░░██████████▒   ░█████▓▒▒▓▓█████
    █████                ▒▓▓▓████████████████▒░░           ▓██    ░▒▒▓▓█████████████░   ░███████████████
    ████▓   ░░▒▒▒▓▓█░   ░████████████▒░   ▓██░      ░░     ▓██   ░▓█████▒███████████░   ░███████████████
    ████▒   ░███████░   ▒██▓    █████▒    ▓██    █████░    ▓█▒          ░███████▓▓██    ░███████▓▒██████
    ████▒   ▒██████▓    ▓██░   ░█████░   ░██▒   ░█████░    ██░    ░░░▒▒░▓██▒ ░░░░██▒    ▓███████████████
    ████▒▓▓████████▒    ███    ░█████░   ░██░   ░█████    ▒██░        ░░███░  ░░▒██░    ██████▓▒░░░█████
    ███████████████░    ███    ░████▓    ▓██    ▒█▒      ░▓█▓ ░░▒▒▒▓███████▓███████░   ░██████░   ░█████
    ███████████████░   ░██▓    ▒███▒    ░██▓░░░░▓█░   ░░▒▓██▓▒░▒▒▒███▓▒▒▒██████████░░  ░██████▒▒▒▒▓█████
    ███████████████    ▒██▓     ░░ ░    ▒██▓  ░░██░░▒▓██████▒▒▒░▒░▒▒▒░▒▒▓█████████▓▒▒▒▒▒█████░░░▒▒██████
    ██████████████▒    ███▓      ░▒    ░▓██▒▒▒▒▒██░░████████▒▒▒░▒▒▒▒▒▒▒▓██████████▓▒▒▒░▒░░░▒░▒▒▒▒▒████▓█
    ██████████████░░░░░█████▒░░▒▒░    ▒▓███▒░▒░▒████████████▒▒▓█████████▓▒░   ░░██▓▒▒▒▒▒▒░▒▒▒▒▒▒▒█████▒█
    ██████████████    ▒████████▓░   ░▒▓████░▒░▒▓██████████████▓▒▒░░  ░░▒▒▓█████████▒▒▒▒▒▒▒▒▒▒▒▓███████▒█
    █████████████▓▒▒▒░▓██████▓░    ▒▒█████▓▒▓▓███████▓▒░░░   ░▒▓███████████▓▓░▒▒▒▓██████████████▓▒▒▓██▒█
    █████████████▓▒▒▒▒██████░   ░░▒██████████▓▒░   ░░░▒▓██████████▓▒▒▒▒░▒▒▒▒▒░▒▒▒▒▒▒▓█▓█▓▒▒░▒▒▒▒▒▒▒▓██▒█
    █████████████▒▒▒▒▒███████▒░▒▒████▒░   ░░▒▒▓█████████▓▓▓▒▒▒▒░▒▒▒▒▒▒▒░▒▒▒▒▒░▒▒▒▒▒▒▒▓░▒▒▒▒░▒▒▒▒▒▒▒▓██▒█
    █████████████▒▓████████▓███████▒▒▓██████████▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒░▒▒▒▓▒░▒▒▒▒▒▒▓▓░▒▒▒▓░▒▒▒▒▒▒▒▓██▒█
    ███████████████▓░      ░▒███████████▓▒▒░▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒░▒▒▒▒▒░▒▒▒▒▒▒▒▒░▒▒▒▒░▒▒▒▒▒▒▒▓██▒█
    ██████▓▒▒░░░░░░▒▓██████████▓▓▒▒▒ ▒▒▒▒▒▒░▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒░▒▒▒▒▒░▒▒▒▒▒▒▒▓░▒▒▒▒░▒▒▒▒▒▒▒▓██▒█
    ████▓▓▓▓▓▓▓▒▓▓▓▓▒▓▓▓▓▓▓▓▓▓▒▓▓▓▓▓▓▓▓▓▒▓▓▓▓▓▓▒▓▓▓▓▓▓▓▓▓▒▓▓▓▓▓▒▓▓▓▓▓▒▓▓▓▓▓▓▓▒▓▓▓▓▓▓▓▓▒▓▓▓▓▒▓▓▓▓▓▓▓█████



Type-c compiler, version ${compilerVersion}.
Usage: type-c <command> [options]
        --run-tests             Run all unit test
        --compile <dir>         Compile a directory
        --no-generate-binaries  Do not generate binaries
        --output <dir>          Output folder
        --run                   Run the generated output
        --generate-ir           Generate IR and DOT files
        --no-warnings           Do not show warnings
        init [folder]           Initialize a new project at the given folder
    `);
}

// Main logic to determine which command to run
if (args.includes("--help") || args.includes("-h")) {
    printHelp();
} else if (args[0] === "init") {
    const folder = args[1] || "."; // Default to the current directory if no folder is provided
    initProject(folder);
} else if (args.includes("--run-tests")) {
    // const options = parseRunTestsOptions(args);
    //let code = TypeC.runTests();
    //exit(code)
    throw new Error("Not implemented yet");
} else if (args.includes("--compile") || args.includes("-c")) {
    const options = parseCompileOptions(args);
    TypeC.compile(options);
} else {
    console.log("Invalid command. Use '--run-tests' or '--compile <dir>'");
}
