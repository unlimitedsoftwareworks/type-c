from std.string import String
from std.io import println
from std.unit.test import TestUnit, UnitSet


fn test_case_1(rn: TestUnit) {
    let z = 10
    let x = do {
        let a = 1
        let b = 4
        if z > 5 {
            return a + b * b
        }
        return a + b
    }

    z = 3

    let y = do {
        let a = 1
        let b = 1
        if z > 5 {
            return a + b * b
        }
        return a + b
    }

    rn.assert_eq(x, 17)
    rn.assert_eq(y, 2)
}

fn test_case_2(rn: TestUnit) {
    let z = 5
    let result = do {
        let x = do {
            let a = 3
            let b = 2
            return a + b
        }

        let y = do {
            let a = 1
            let b = 4
            if z > 3 {
                return a * b
            }
            return a + b
        }

        return x + y
    }

    rn.assert_eq(result, 9)
}

fn test_case_3(rn: TestUnit) {
    let z = 8
    let result = do {
        let a = 1
        let b = 5
        if z > 6 {
            return a * b * b
        }
        return a + b
    }

    rn.assert_eq(result, 25)  // Early return due to z > 6
}

fn test_case_4(rn: TestUnit) {
    let z = 3
    let result = do {
        let a = 2
        let b = 5
        if z > 6 {
            return a * b
        }
        return a + b
    }

    rn.assert_eq(result, 7)  // No early return, so a + b = 7
}

fn test_case_5(rn: TestUnit) {
    let x = 10
    let result = do {
        let a = 3
        let b = 4
        if x > 5 && b == 4 {
            return a * b
        }
        return a + b
    }

    rn.assert_eq(result, 12)  // Condition x > 5 && b == 4 holds, so return a * b
}

fn test_case_6(rn: TestUnit) {
    let z = 10
    let result = do {
        let a = 2
        let b = 3
        return do {
            let x = a + b
            let y = z
            if y > 5 {
                return x * y
            }
            return x + y
        }
    }

    rn.assert_eq(result, 50)  // Inner `do` returns 5 * 10 = 50
}

fn test_case_7(rn: TestUnit) {
    let z = 3
    let result = do {
        let a = 2
        let b = 4
        if z > 5 {
            return a + b
        }
        return do {
            let x = a * b
            return x + z
        }
    }

    rn.assert_eq(result, 11)  // Outer `do` returns inner `do`, which calculates 8 + 3 = 11
}


fn fff() -> (u32, u32) = (100, 200)

fn test_case_8(rn: TestUnit) {
    let z = 5
    let result = do {
        let a = 3
        let b = 2
        return do {
            let x = a + b
            return do {
                let y = x * 2
                return y + z
            }
        }
    }

    rn.assert_eq(result, 15)  // Inner `do` returns 10 + 5 = 15
    let aaa = 1
    let (a, b) = do {
        return fff()
    }

    rn.assert_eq(a, 100)
    rn.assert_eq(b, 200)

    fn loop(x: u32[]) -> (u32, bool) {
        let i: u64 = 0

        return (x[i], false)
    }

    let (aa, bb) = loop([2, 3, 4, 5])
    rn.assert_eq(aa, 2)
    rn.assert_eq(bb, false)
}

fn main() -> u32 {
    let test_1 = new TestUnit("test 1", "Tests do-expressions", test_case_1)
    let test_2 = new TestUnit("test 2", "Nested do Expressions", test_case_2)
    let test_3 = new TestUnit("test 3", "do Expression with Early Return", test_case_3)
    let test_4 = new TestUnit("test 4", "do Expression Without Early Return", test_case_4)
    let test_5 = new TestUnit("test 5", "do Expression with Complex Conditions", test_case_5)
    let test_6 = new TestUnit("test 6", "Nested do Expressions with Return", test_case_6)
    let test_7 = new TestUnit("test 7", "Nested do Expressions with Early Return", test_case_7)
    let test_8 = new TestUnit("test 8", "Test Case 8: Triple Nested do Expression", test_case_8)
    let set = new UnitSet("STD Test 15", "Tests do-expressions", [test_1, test_2, test_3, test_4, test_5, test_6, test_7, test_8])
    return set.run()
}