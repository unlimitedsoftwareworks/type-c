from std.unit.test import TestUnit

fn test_u16_operations(runner: TestUnit) {
    // Declare variables for all types
    let v_u16: u16 = 2
    let v_u8: u8 = 1
    let v_u32: u32 = 3
    let v_u64: u64 = 4
    let v_i8: i8 = 5
    let v_i16: i16 = 6
    let v_i32: i32 = 7
    let v_i64: i64 = 8
    let v_f32: f32 = 9.0f
    let v_f64: f64 = 10.0

    // Arithmetic Operations: Addition
    runner.assert_eq<u16>(v_u16 + v_u16, 4)          // u16 + u16
    runner.assert_eq<u16>(v_u16 + v_u8 as u16, 3)    // u16 + u8
    runner.assert_eq<u32>(v_u16 + v_u32, 5)          // u16 + u32
    runner.assert_eq<u64>(v_u16 + v_u64, 6)          // u16 + u64
    runner.assert_eq<i32>(v_u16 + v_i8 as i16, 7)    // u16 + i8
    runner.assert_eq<i32>(v_u16 + v_i16, 8)          // u16 + i16
    runner.assert_eq<i32>(v_u16 + v_i32, 9)          // u16 + i32
    runner.assert_eq<i64>(v_u16 + v_i64, 10)         // u16 + i64
    runner.assert_f32_eq_pre(v_u16 + v_f32, 11.0f, 0.00001f)       // u16 + f32
    runner.assert_eq<f64>(v_u16 + v_f64, 12.0)       // u16 + f64

    // Arithmetic Operations: Subtraction
    runner.assert_eq<u16>(v_u16 - v_u16, 0)          // u16 - u16
    runner.assert_eq<u16>(v_u16 - v_u8 as u16, 1)    // u16 - u8
    runner.assert_eq<u32>(v_u32 - v_u8, 2) // Wrap-around for u32
    runner.assert_eq<u64>(v_u64 - v_u8, 3) // Wrap-around for u64
    runner.assert_eq<i32>(v_u16 - v_i8 as i16, -3)   // u16 - i8
    runner.assert_eq<i32>(v_u16 - v_i16, -4)         // u16 - i16
    runner.assert_eq<i32>(v_u16 - v_i32, -5)         // u16 - i32
    runner.assert_eq<i64>(v_u16 - v_i64, -6)         // u16 - i64
    runner.assert_f32_eq_pre(v_u16 - v_f32, -7.0f, 0.00001f)       // u16 - f32
    runner.assert_eq<f64>(v_u16 - v_f64, -8.0)       // u16 - f64

    // Arithmetic Operations: Multiplication
    runner.assert_eq<u16>(v_u16 * v_u16, 4)          // u16 * u16
    runner.assert_eq<u16>(v_u16 * v_u8 as u16, 2)    // u16 * u8
    runner.assert_eq<u32>(v_u16 * v_u32, 6)          // u16 * u32
    runner.assert_eq<u64>(v_u16 * v_u64, 8)          // u16 * u64
    runner.assert_eq<i32>(v_u16 * v_i8 as i16, 10)   // u16 * i8
    runner.assert_eq<i32>(v_u16 * v_i16, 12)         // u16 * i16
    runner.assert_eq<i32>(v_u16 * v_i32, 14)         // u16 * i32
    runner.assert_eq<i64>(v_u16 * v_i64, 16)         // u16 * i64
    runner.assert_f32_eq_pre(v_u16 * v_f32, 18.0f, 0.00001f)       // u16 * f32
    runner.assert_eq<f64>(v_u16 * v_f64, 20.0)       // u16 * f64

    // Arithmetic Operations: Division
    runner.assert_eq<u16>(v_u16 / v_u16, 1)          // u16 / u16
    runner.assert_eq<u16>(v_u16 / v_u8 as u16, 2)    // u16 / u8
    runner.assert_eq<u32>(v_u16 / v_u32, 0)          // u16 / u32
    runner.assert_eq<u64>(v_u16 / v_u64, 0)          // u16 / u64
    runner.assert_eq<i32>(v_u16 / v_i8 as i16, 0)    // u16 / i8
    runner.assert_eq<i32>(v_u16 / v_i16, 0)          // u16 / i16
    runner.assert_eq<i32>(v_u16 / v_i32, 0)          // u16 / i32
    runner.assert_eq<i64>(v_u16 / v_i64, 0)          // u16 / i64
    runner.assert_f32_eq_pre(v_u16 / v_f32, 0.222222f, 0.00001f)   // u16 / f32
    runner.assert_eq<f64>(v_u16 / v_f64, 0.2)        // u16 / f64

    // Comparison Operations
    runner.assert_eq<bool>(v_u16 == v_u16, true)     // u16 == u16
    runner.assert_eq<bool>(v_u16 != v_u16, false)    // u16 != u16
    runner.assert_eq<bool>(v_u16 < v_u32, true)      // u16 < u32
    runner.assert_eq<bool>(v_u16 <= v_u64, true)     // u16 <= u64
    runner.assert_eq<bool>(v_u16 > v_u8 as u16, true) // u16 > u8
    runner.assert_eq<bool>(v_u16 >= v_i8 as i16, false) // u16 >= i8

    // Logical Operations
    runner.assert_eq<bool>((v_u16 < v_u32) && (v_u16 > v_u8 as u16), true) // Logical AND
    runner.assert_eq<bool>((v_u16 > v_u32) || (v_u16 > v_u8 as u16), true) // Logical OR
    runner.assert_eq<bool>(!(v_u16 > v_u32), true) // Logical NOT
}
