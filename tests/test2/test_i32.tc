from std.unit.test import TestUnit

fn test_i32_operations(runner: TestUnit) {
    // Declare variables for all types
    let v_i32: i32 = 7
    let v_u8: u8 = 1
    let v_u16: u16 = 2
    let v_u32: u32 = 3
    let v_u64: u64 = 4
    let v_i8: i8 = 5
    let v_i16: i16 = 6
    let v_i64: i64 = 8
    let v_f32: f32 = 9.0f
    let v_f64: f64 = 10.0

    // Arithmetic Operations: Addition
    runner.assert_eq<i32>(v_i32 + v_i32, 14)           // i32 + i32
    runner.assert_eq<i32>(v_i32 + v_u8 as i32, 8)      // i32 + u8
    runner.assert_eq<i32>(v_i32 + v_u16 as i32, 9)     // i32 + u16
    runner.assert_eq<i64>(v_i32 + v_u32 as i64, 10)    // i32 + u32
    runner.assert_eq<i64>(v_i32 + v_u64 as i64, 11)    // i32 + u64
    runner.assert_eq<i32>(v_i32 + v_i8 as i32, 12)     // i32 + i8
    runner.assert_eq<i32>(v_i32 + v_i16 as i32, 13)    // i32 + i16
    runner.assert_eq<i64>(v_i32 + v_i64, 15)           // i32 + i64
    runner.assert_f32_eq_pre(v_i32 + v_f32, 16.0f, 0.00001f)         // i32 + f32
    runner.assert_eq<f64>(v_i32 + v_f64, 17.0)         // i32 + f64

    // Arithmetic Operations: Subtraction
    runner.assert_eq<i32>(v_i32 - v_i32, 0)            // i32 - i32
    runner.assert_eq<i32>(v_i32 - v_u8 as i32, 6)      // i32 - u8
    runner.assert_eq<i32>(v_i32 - v_u16 as i32, 5)     // i32 - u16
    runner.assert_eq<i64>(v_i32 - v_u32 as i64, 4)     // i32 - u32
    runner.assert_eq<i64>(v_i32 - v_u64 as i64, 3)     // i32 - u64
    runner.assert_eq<i32>(v_i32 - v_i8 as i32, 2)      // i32 - i8
    runner.assert_eq<i32>(v_i32 - v_i16 as i32, 1)     // i32 - i16
    runner.assert_eq<i64>(v_i32 - v_i64, -1)           // i32 - i64
    runner.assert_f32_eq_pre(v_i32 - v_f32, -2.0f, 0.00001f)         // i32 - f32
    runner.assert_eq<f64>(v_i32 - v_f64, -3.0)         // i32 - f64

    // Arithmetic Operations: Multiplication
    runner.assert_eq<i32>(v_i32 * v_i32, 49)           // i32 * i32
    runner.assert_eq<i32>(v_i32 * v_u8 as i32, 7)      // i32 * u8
    runner.assert_eq<i32>(v_i32 * v_u16 as i32, 14)    // i32 * u16
    runner.assert_eq<i64>(v_i32 * v_u32 as i64, 21)    // i32 * u32
    runner.assert_eq<i64>(v_i32 * v_u64 as i64, 28)    // i32 * u64
    runner.assert_eq<i32>(v_i32 * v_i8 as i32, 35)     // i32 * i8
    runner.assert_eq<i32>(v_i32 * v_i16 as i32, 42)    // i32 * i16
    runner.assert_eq<i64>(v_i32 * v_i64, 56)           // i32 * i64
    runner.assert_f32_eq_pre(v_i32 * v_f32, 63.0f, 0.00001f)         // i32 * f32
    runner.assert_eq<f64>(v_i32 * v_f64, 70.0)         // i32 * f64

    // Arithmetic Operations: Division
    runner.assert_eq<i32>(v_i32 / v_i32, 1)            // i32 / i32
    runner.assert_eq<i32>(v_i32 / v_u8 as i32, 7)      // i32 / u8
    runner.assert_eq<i32>(v_i32 / v_u16 as i32, 3)     // i32 / u16
    runner.assert_eq<i64>(v_i32 / v_u32 as i64, 2)     // i32 / u32
    runner.assert_eq<i64>(v_i32 / v_u64 as i64, 1)     // i32 / u64
    runner.assert_eq<i32>(v_i32 / v_i8 as i32, 1)      // i32 / i8
    runner.assert_eq<i32>(v_i32 / v_i16 as i32, 1)     // i32 / i16
    runner.assert_eq<i64>(v_i32 / v_i64, 0)            // i32 / i64
    runner.assert_f32_eq_pre(v_i32 / v_f32, 0.777778f, 0.00001f)     // i32 / f32
    runner.assert_eq<f64>(v_i32 / v_f64, 0.7)          // i32 / f64

    // Comparison Operations
    runner.assert_eq<bool>(v_i32 == v_i32, true)       // i32 == i32
    runner.assert_eq<bool>(v_i32 != v_i32, false)      // i32 != i32
    runner.assert_eq<bool>(v_i32 < v_u8 as i32, false) // i32 < u8
    runner.assert_eq<bool>(v_i32 > v_u16 as i32, true) // i32 > u16
    runner.assert_eq<bool>(v_i32 >= v_u32 as i32, true) // i32 <= u32
    runner.assert_eq<bool>(v_i32 <= v_f64 as i32, true) // i32 >= f64

    // Logical Operations
    runner.assert_eq<bool>((v_i32 > 0) && (v_i32 < 10), true)  // Logical AND
    runner.assert_eq<bool>((v_i32 < 0) || (v_i32 > 0), true)   // Logical OR
    runner.assert_eq<bool>(!(v_i32 < 0), true)                // Logical NOT
}
