from std.unit.test import TestUnit

fn test_f64_operations(runner: TestUnit) {
    // Declare variables for all types
    let v_f64: f64 = 10.0
    let v_u8: u8 = 1
    let v_u16: u16 = 2
    let v_u32: u32 = 3
    let v_u64: u64 = 4
    let v_i8: i8 = 5
    let v_i16: i16 = 6
    let v_i32: i32 = 7
    let v_i64: i64 = 8
    let v_f32: f32 = 9.0f

    // Arithmetic Operations: Addition
    runner.assert_eq<f64>(v_f64 + v_f64, 20.0)       // f64 + f64
    runner.assert_eq<f64>(v_f64 + v_u8 as f64, 11.0) // f64 + u8
    runner.assert_eq<f64>(v_f64 + v_u16 as f64, 12.0) // f64 + u16
    runner.assert_eq<f64>(v_f64 + v_u32 as f64, 13.0) // f64 + u32
    runner.assert_eq<f64>(v_f64 + v_u64 as f64, 14.0) // f64 + u64
    runner.assert_eq<f64>(v_f64 + v_i8 as f64, 15.0) // f64 + i8
    runner.assert_eq<f64>(v_f64 + v_i16 as f64, 16.0) // f64 + i16
    runner.assert_eq<f64>(v_f64 + v_i32 as f64, 17.0) // f64 + i32
    runner.assert_eq<f64>(v_f64 + v_i64 as f64, 18.0) // f64 + i64
    runner.assert_eq<f64>(v_f64 + v_f32 as f64, 19.0) // f64 + f32

    // Arithmetic Operations: Subtraction
    runner.assert_eq<f64>(v_f64 - v_f64, 0.0)        // f64 - f64
    runner.assert_eq<f64>(v_f64 - v_u8 as f64, 9.0)  // f64 - u8
    runner.assert_eq<f64>(v_f64 - v_u16 as f64, 8.0) // f64 - u16
    runner.assert_eq<f64>(v_f64 - v_u32 as f64, 7.0) // f64 - u32
    runner.assert_eq<f64>(v_f64 - v_u64 as f64, 6.0) // f64 - u64
    runner.assert_eq<f64>(v_f64 - v_i8 as f64, 5.0)  // f64 - i8
    runner.assert_eq<f64>(v_f64 - v_i16 as f64, 4.0) // f64 - i16
    runner.assert_eq<f64>(v_f64 - v_i32 as f64, 3.0) // f64 - i32
    runner.assert_eq<f64>(v_f64 - v_i64 as f64, 2.0) // f64 - i64
    runner.assert_eq<f64>(v_f64 - v_f32 as f64, 1.0) // f64 - f32

    // Arithmetic Operations: Multiplication
    runner.assert_eq<f64>(v_f64 * v_f64, 100.0)      // f64 * f64
    runner.assert_eq<f64>(v_f64 * v_u8 as f64, 10.0) // f64 * u8
    runner.assert_eq<f64>(v_f64 * v_u16 as f64, 20.0) // f64 * u16
    runner.assert_eq<f64>(v_f64 * v_u32 as f64, 30.0) // f64 * u32
    runner.assert_eq<f64>(v_f64 * v_u64 as f64, 40.0) // f64 * u64
    runner.assert_eq<f64>(v_f64 * v_i8 as f64, 50.0) // f64 * i8
    runner.assert_eq<f64>(v_f64 * v_i16 as f64, 60.0) // f64 * i16
    runner.assert_eq<f64>(v_f64 * v_i32 as f64, 70.0) // f64 * i32
    runner.assert_eq<f64>(v_f64 * v_i64 as f64, 80.0) // f64 * i64
    runner.assert_eq<f64>(v_f64 * v_f32 as f64, 90.0) // f64 * f32

    // Arithmetic Operations: Division
    runner.assert_eq<f64>(v_f64 / v_f64, 1.0)        // f64 / f64
    runner.assert_eq<f64>(v_f64 / v_u8 as f64, 10.0) // f64 / u8
    runner.assert_eq<f64>(v_f64 / v_u16 as f64, 5.0) // f64 / u16
    runner.assert_f64_eq_pre(v_f64 / v_u32 as f64, 3.333333, 0.00001) // f64 / u32
    runner.assert_eq<f64>(v_f64 / v_u64 as f64, 2.5) // f64 / u64
    runner.assert_eq<f64>(v_f64 / v_i8 as f64, 2.0)  // f64 / i8
    runner.assert_f64_eq_pre(v_f64 / v_i16 as f64, 1.666667, 0.00001) // f64 / i16
    runner.assert_f64_eq_pre(v_f64 / v_i32 as f64, 1.428571, 0.00001) // f64 / i32
    runner.assert_f64_eq_pre(v_f64 / v_i64 as f64, 1.25, 0.00001) // f64 / i64
    runner.assert_f64_eq_pre(v_f64 / v_f32 as f64, 1.111111, 0.00001) // f64 / f32

    // Comparison Operations
    runner.assert_eq<bool>(v_f64 == v_f64, true)     // f64 == f64
    runner.assert_eq<bool>(v_f64 != v_f64, false)    // f64 != f64
    runner.assert_eq<bool>(v_f64 > v_u8 as f64, true) // f64 > u8
    runner.assert_eq<bool>(v_f64 < v_u16 as f64, false) // f64 < u16
    runner.assert_eq<bool>(v_f64 >= v_u32 as f64, true) // f64 >= u32
    runner.assert_eq<bool>(v_f64 <= v_i8 as f64, false) // f64 <= i8

    // Logical Operations
    runner.assert_eq<bool>((v_f64 > 0.0) && (v_f64 < 20.0), true)  // Logical AND
    runner.assert_eq<bool>((v_f64 < 0.0) || (v_f64 > 0.0), true)   // Logical OR
    runner.assert_eq<bool>(!(v_f64 > 20.0), true)                 // Logical NOT
}
