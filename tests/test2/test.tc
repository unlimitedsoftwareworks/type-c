from std.io import println
from std.string import String
from std.unit.test import TestUnit, UnitSet
from test_i8 import test_i8_operations
from test_u8 import test_u8_operations
from test_i16 import test_i16_operations
from test_u16 import test_u16_operations
from test_i32 import test_i32_operations
from test_u32 import test_u32_operations
from test_i64 import test_i64_operations
from test_u64 import test_u64_operations
from test_f32 import test_f32_operations
from test_f64 import test_f64_operations

type Enum = enum {
    Ok,
    Err,
    Maybe
}

fn getErr(i: u64) -> Enum {
    let x: Enum[] = [Enum.Err, Enum.Ok, Enum.Maybe, Enum.Err, Enum.Ok, Enum.Maybe]
    return x[i]
}


fn test_stuff(runner: TestUnit) {
    runner.assert_eq(getErr(0), Enum.Err)
    runner.assert_eq(getErr(1), Enum.Ok)
    runner.assert_eq(getErr(2), Enum.Maybe)
    runner.assert_eq(getErr(3), Enum.Err)
    runner.assert_eq(getErr(4), Enum.Ok)
    runner.assert_eq(getErr(5), Enum.Maybe)


    let x: u32[]? = null
    let y: u32[]? = [1, 2, 3]

    if x {
        runner.assert_unreachable()
    }
    else {
        runner.assert_reachable()
    }

    if x && !(x is null) {
        runner.assert_unreachable()
    }
    else {
        runner.assert_reachable()
    }

    if y && x is null {
        runner.assert_reachable()
    }

    runner.assert_eq(true == true, true)
    runner.assert_eq(true == false, false)
    runner.assert_eq(false == true, false)
    runner.assert_eq(false == false, true)

    runner.assert_eq(true != true, false)
    runner.assert_eq(true != false, true)
    runner.assert_eq(false != true, true)
    runner.assert_eq(false != false, false)

    runner.assert_eq(true || true, true)
    runner.assert_eq(true && true, true)
    runner.assert_eq(true || false, true)


}

fn main() -> u32 {
    let test_i8_ops = new TestUnit("test i8", "Tests i8 against all types", test_i8_operations)
    let test_u8_ops = new TestUnit("test u8", "Tests u8 against all types", test_u8_operations)
    let test_i16_ops = new TestUnit("test i16", "Tests i16 against all types", test_i16_operations)
    let test_u16_ops = new TestUnit("test u16", "Tests u16 against all types", test_u16_operations)
    let test_i32_ops = new TestUnit("test i32", "Tests i32 against all types", test_i32_operations)
    let test_u32_ops = new TestUnit("test u32", "Tests u32 against all types", test_u32_operations)
    let test_i64_ops = new TestUnit("test i64", "Tests i64 against all types", test_i64_operations)
    let test_u64_ops = new TestUnit("test u64", "Tests u64 against all types", test_u64_operations)
    let test_f32_ops = new TestUnit("test f32", "Tests f32 against all types", test_f32_operations)
    let test_f64_ops = new TestUnit("test f64", "Tests f64 against all types", test_f64_operations)

    let test_null_instance_check = new TestUnit("test null instance check", "Tests null instance check", test_stuff)

    let set = new UnitSet("STD Test 2", "Tests all operations for all types", [
        test_i8_ops,
        test_u8_ops,
        test_i16_ops,
        test_u16_ops,
        test_i32_ops,
        test_u32_ops,
        test_i64_ops,
        test_u64_ops,
        test_f32_ops,
        test_f64_ops,
        test_null_instance_check
    ])

    return set.run()
}

