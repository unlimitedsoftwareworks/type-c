from std.string import String
from std.io import println
from std.unit.test import TestUnit, UnitSet


fn test_case_1(rn: TestUnit) {
    cfn loop(x: u32[]) -> (u32, bool) {
        let i: u64 = 0

        while i < x.length {
            let j = i+1
            
            if j == x.length {
                yield! (x[i], true)
            } else {
                yield (x[i], false)
            }

            i = j
        }
    }

    let z: u32[] = [5, 3, 1, 100, 10]

    let co_iter = coroutine loop

    let (a, a_) = co_iter(z)
    rn.assert_eq<u32>(a, 5)
    rn.assert_eq<bool>(a_, false)
    rn.assert_eq<u8>(co_iter.state, 2)

    let (b, b_) = co_iter(z)
    rn.assert_eq<u32>(b, 3)
    rn.assert_eq<bool>(b_, false)
    rn.assert_eq<u8>(co_iter.state, 2)

    let (c, c_) = co_iter(z)
    rn.assert_eq<u32>(c, 1)
    rn.assert_eq<bool>(c_, false)
    rn.assert_eq<u8>(co_iter.state, 2)

    let (d, d_) = co_iter(z)
    rn.assert_eq<u32>(d, 100)
    rn.assert_eq<bool>(d_, false)
    rn.assert_eq<u8>(co_iter.state, 2)

    let (e, e_) = co_iter(z)
    rn.assert_eq<u32>(e, 10)
    rn.assert_eq<bool>(e_, true)
    rn.assert_eq<u8>(co_iter.state, 3)
}

type DataGenerator = class {
    let co: coroutine<cfn() -> String>

    fn init(f: cfn() -> String) {
        this.co = coroutine f
    }
}

fn test_case_2(rn: TestUnit) {
    fn dataGenerator() -> String {
        let data = ["hi", "hello", "hey"]
        
        yield data[0]
        yield data[1]
        yield! data[2]
    }
    
    let s = {
        co: coroutine dataGenerator
    }

    rn.assert_obj_eq<String>(s.co(), "hi")
    rn.assert_obj_eq<String>(s.co(), "hello")
    rn.assert_obj_eq<String>(s.co(), "hey")

    let c = new DataGenerator(dataGenerator)

    rn.assert_obj_eq<String>(c.co(), "hi")
    rn.assert_obj_eq<String>(c.co(), "hello")
    rn.assert_obj_eq<String>(c.co(), "hey")
}

fn test_case_3(rn: TestUnit) {
    fn dataGenerator() -> String {
        let data = ["hi", "hello", "hey"]
        
        yield data[0]
        yield data[1]
        yield! data[2]
    }

    let arr = [coroutine dataGenerator, coroutine dataGenerator, coroutine dataGenerator]

    rn.assert_obj_eq<String>(arr[0](), "hi")
    rn.assert_obj_eq<String>(arr[0](), "hello")
    rn.assert_obj_eq<String>(arr[0](), "hey")

    rn.assert_obj_eq<String>(arr[1](), "hi")
    rn.assert_obj_eq<String>(arr[1](), "hello")
    rn.assert_obj_eq<String>(arr[1](), "hey")

    rn.assert_obj_eq<String>(arr[2](), "hi")
    rn.assert_obj_eq<String>(arr[2](), "hello")
    rn.assert_obj_eq<String>(arr[2](), "hey")
}

fn test_case_4(rn: TestUnit) {
    fn dataGenerator<T>(data: T[]) -> T {
        let old = data
        yield old[0]
        yield old[1]
        yield! old[2]
    }

    let co = coroutine dataGenerator<String>

    let e = co(["hi", "hello", "hey"])
    rn.assert_obj_eq<String>(e, "hi")

    e = co(["hi", "bye", "hey"])
    rn.assert_obj_eq<String>(e, "hello")

    let co2 = coroutine dataGenerator<u64>

    let e2 = co2([1 as u64, 2, 3])
    rn.assert_eq<u64>(e2, 1)

    e2 = co2([1 as u64, 5, 3])
    rn.assert_eq<u64>(e2, 2)
}

fn test_case_5(rn: TestUnit) {
    fn dataGenerator<T>(data: T[]) -> T {
        yield data[0]
        yield data[1]
        yield! data[2]
    }

    let co = coroutine dataGenerator<String>

    let res = 
        let e0 = co(["hi", "hello", "hey"]) in
            let e1 = co(["hi", "hello", "hey"]) in
                let e2 = co(["hi", "hello", "hey"]) in do {
                    rn.assert_obj_eq<String>(e0, "hi")
                    rn.assert_obj_eq<String>(e1, "hello")
                    rn.assert_obj_eq<String>(e2, "hey")
                    return co.state
                }
    
    rn.assert_eq<u8>(res, 3)
}

fn main() -> u32 {
    let test_1 = new TestUnit("test 1", "Tests regular coroutines", test_case_1)
    let test_2 = new TestUnit("test 2", "Tests coroutine generator", test_case_2)
    let test_3 = new TestUnit("test 3", "Tests coroutine array", test_case_3)
    let test_4 = new TestUnit("test 4", "Tests coroutine with generic parameters", test_case_4)
    let test_5 = new TestUnit("test 5", "Tests coroutine with do statement and let-in expressions", test_case_5)

    let set = new UnitSet("Coroutine Tests", "Tests coroutines",
        [test_1, test_2, test_3, test_4, test_5]
    )

    return set.run()
}
