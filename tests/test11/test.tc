from std.string import String
from std.unit.test import TestUnit, UnitSet
from std.io import println
fn doStuff(x: u32) -> (u32, u32) = (x+1, x+2)
fn doStuff2<T>(x: T) = (x+1, x+2)

type Z<T> = class {
    let x: T

    fn init(x: T) {
        this.x = x
    }

    fn add(y: T) -> (T, T) {
        return (this.x, this.x+y)
    }

    static fn callme(x: u32, y: u32) -> (u32, u32) {
        return (x+1, y+5)
    }

    static fn callme2<T>(x: T, y: T) -> (T, T) {
        return (x+2, y+3)
    }

    static fn haha() = (1, "oupsy")
}


fn test_case_1(rn: TestUnit) {
    let arr: u32[] = [1, 2, 3, 4]
    let [x, y,...rest] = arr

    rn.assert_eq<u32>(x, 1)
    rn.assert_eq<u32>(y, 2)
    
    match rest {
        [3, 4] { rn.assert_reachable() }
        _ { rn.assert_unreachable() }
    }
}

fn test_case_2(rn: TestUnit) {

    let user = {name: "John", age: 30, is_student: true}

    let {name, ...res} = user

    rn.assert_obj_eq<String>(name, "John")
    rn.assert_eq<bool>(res.is_student, true)
    rn.assert_eq<u8>(res.age, 30)
}


fn test_case_3(rn: TestUnit) {

    let (aa, bb) = Z.haha()

    rn.assert_eq<u32>(aa, 1)
    rn.assert_obj_eq<String>(bb, "oupsy")

    let (cc, dd) = Z.callme(3, 4)

    rn.assert_eq<u32>(cc, 4)
    rn.assert_eq<u32>(dd, 9)

    let (ee, ff) = Z.callme2(cc, dd)

    rn.assert_eq<u32>(ee, 6)
    rn.assert_eq<u32>(ff, 12)

    let (gg, hh) = doStuff(10)

    rn.assert_eq<u32>(gg, 11)
    rn.assert_eq<u32>(hh, 12)

    let (ii, jj) = doStuff2<u32>(10)

    rn.assert_eq<u32>(ii, 11)
    rn.assert_eq<u32>(jj, 12)

    let (kk, ll) = doStuff2<String>("hello")

    // addition changes the string, so +1 then +2 -> "hello12"
    rn.assert_obj_eq<String>(kk, "hello12")
    rn.assert_obj_eq<String>(ll, "hello12")

    let (mm, nn) = doStuff2(10)

    rn.assert_eq<u8>(mm, 11)
    rn.assert_eq<u8>(nn, 12)
}

fn main() {
    let test_1 = new TestUnit("test 1", "Array destructuring", test_case_1)
    let test_2 = new TestUnit("test 2", "Struct destructuring", test_case_2)
    let test_3 = new TestUnit("test 3", "Tuple destructuring", test_case_3)
    let set = new UnitSet("Matching tests", "Tests destructuring", [test_1, test_2, test_3])
    return set.run()
}