from std.string import String
from std.io import println
from std.unit.test import TestUnit, UnitSet

fn test1(runner: TestUnit) {
    runner.assert_eq<u8>(1, 1)
}

type X = u32

fn test2(runner: TestUnit) {
    let s1: String = "hi"
    let s2: String = "hi"
    runner.assert_obj_eq<String>(s1, s1)
    let s3: String = "bye"
    runner.assert_obj_neq<String>(s1, s3)

    let x1: X = 1
    let x2: X = 2

    runner.assert_neq<u32>(x1, x2)
}

type Point = class {
    let x: u32
    let y: u32

    fn init(x: u32, y: u32) {
        this.x = x
        this.y = y
    }

    fn toString() -> String {
        return "Point(" + this.x + ", " + this.y + ")"
    }

    fn eq(other: Point) -> bool {
        return (this.x == other.x) && (this.y == other.y)
    }
}

fn test3(runner: TestUnit) {
    let p1 = new Point(1, 2)
    let p2 = new Point(1, 2)
    runner.assert_obj_eq<Point>(p1, p2)
    
    let p3 = new Point(1, 3)
    runner.assert_obj_neq<Point>(p1, p3)

    let p4: Point? = null
    runner.assert_obj_null<Point>(p4)

    let p5: Point? = new Point(1, 20)
    runner.assert_obj_not_null<Point>(p5)
}



fn main() {
    let test_1 = new TestUnit("test 1", "Basic Sanity", test1)
    let test_2 = new TestUnit("test 2", "Strings", test2)
    let test_3 = new TestUnit("test 3", "Basic class", test3)

    let set = new UnitSet("STD Test 1", "Tests random stuff", [test_1, test_2, test_3])

    set.run()
}

