from std.string import String
from std.io import println
from std.unit.test import TestUnit, UnitSet
from std.collections.array import Array

fn test_case_1(rn: TestUnit) {

    let z: u8[] = [1, 2, 3, 4, 5]

    match z {
        [1, 2, 3, 4, 5, ...v] {
            rn.assert_eq<u64>(v.length, 0)
        }
        _ {
            rn.assert_unreachable()
        }
    }

    match z {
        [1, 2, ...v] {
            rn.assert_eq<u64>(v.length, 3)
            rn.assert_eq<u8>(v[0], 3)
            rn.assert_eq<u8>(v[1], 4)
            rn.assert_eq<u8>(v[2], 5)
        }
        _ {
            rn.assert_unreachable()
        }
    }
}



fn fib(n: u32) -> u32 = 
    match n {
        0 => 0,
        1 => 1,
        _ => fib(n - 1) + fib(n - 2),
    }

fn test_case_2(rn: TestUnit) {
    let res1 = fib(10)
    rn.assert_eq<u32>(res1, 55)

    let res2 = fib(20)
    rn.assert_eq<u32>(res2, 6765)
}

type ServerResponse = variant {
    Ok(code: u32),
    Error(code: u32, message: String),
}


fn test_case_3(rn: TestUnit) {
    let res: ServerResponse = ServerResponse.Ok(200)

    match res {
        ServerResponse.Ok(code) {
            rn.assert_eq<u32>(code, 200)
        }

        ServerResponse.Error(code, message) {
            rn.assert_unreachable()
        }
    }

    let res2: ServerResponse = ServerResponse.Error(404, "Not found")

    match res2 {
        ServerResponse.Ok(code) {
            rn.assert_unreachable()
        }

        ServerResponse.Error(code, message) {
            rn.assert_eq<u32>(code, 404)
            rn.assert_obj_eq<String>(message, "Not found")
        }
    }
}

type Response = enum {
    Ok,
    Error,
}

fn test_case_4(rn: TestUnit) {
    
    // todo investigate why const is ignored later on
    let r = Response.Ok

    match r {
        Response.Ok {
            rn.assert_reachable()
        }
        Response.Error {
            rn.assert_unreachable()
        }
    }
    
    r = Response.Error

    match r {
        Response.Ok {
            rn.assert_unreachable()
        }

        Response.Error {
            rn.assert_reachable()
        }
    }
}

type Phone = {
    name: String,
    price: i32
}


fn test_case_5(rn: TestUnit) {
    let phones: Phone[] = [
        {"Samsung Galaxy S10", 3400},  // <-
        {"iPhone 11", 3110}, 
        {"Huawei P30", 3650}
    ]

    match phones {
        [p1, {price: 3110}, ...res] {
            rn.assert_obj_eq<String>(p1.name, "Samsung Galaxy S10")
            rn.assert_eq<i32>(p1.price, 3400)
            rn.assert_eq<u64>(res.length, 1)
            rn.assert_obj_eq<String>(res[0].name, "Huawei P30")
            rn.assert_eq<i32>(res[0].price, 3650)
        }
        
        _ {
            rn.assert_unreachable()
        }
    }
}

fn test_case_6(rn: TestUnit) {
    let pairs: u8[] = [1, 1]

    match pairs {
        [x, y] if x == y {
            rn.assert_eq<u8>(x, y)
        }
        
        _ {
            rn.assert_unreachable()
        }
    }

    let pairs2: u8[] = [1, 2]

    match pairs2 {
        [x, y] if x != y {
            rn.assert_neq<u8>(x, y)
        }
        _ {
            rn.assert_unreachable()
        }
    }
}

type User = {
    name: String,
    age: u32
}

type DataArray = class {
    let data: {
        v: u16,
        w: u16
    }[]

    fn init() {
        this.data = []
        this.data.extend(20)
    }

    fn get(index: u64) -> u16 {
        return this.data[index].v
    }

    fn set(index: u64, value: u16) {
        this.data[index] = {
            v: value,
            w: 1
        }
    }
}

fn test_case_7(rn: TestUnit) {
    let s: User? = {
        name: "John",
        age: 20
    }

    match s {
        null {
            rn.assert_unreachable()
        }
        x {
            rn.assert_obj_eq<String>(x!.name, "John")
        }
    }


     let x = new DataArray()
    x.set(0, 1)
    x.set(1, 2)

    match x {
        // should match since u8 is a subtype of u16
        interface{ fn get(index: u64) -> u16 } & interface { fn set(index: u64, value: u16) } {
            let z = x as interface{ fn get(index: u64) -> u16 } & interface { fn set(index: u64, value: u16) }
            z.set(2, 3)
            rn.assert_eq<u16>(x.get(2), 3)
        }
        x {
            rn.assert_unreachable()
        }
    }

    match x {
        interface{ fn get(index: u64) -> u16 } & interface { fn set(index: u64, value: u64) } {
            rn.assert_unreachable()
        }
        x {
            rn.assert_reachable()
        }
    }

    let z: u32 = 10

    match z {
        0 {
            z = 11
        }
        1 {
            z = 12
        }
        2 {
            z = 13
        }
    }

    rn.assert_eq<u32>(z, 10)
}


type AnotherServerResponse<T> = variant {
    Ok(code: T),
    Error(msg: String)
}

fn test_case_8<U> (rn: TestUnit) {
    let response: AnotherServerResponse<U> = AnotherServerResponse.Error<U>("Error")

    match response {
        AnotherServerResponse.Ok<U>(code) { 
            rn.assert_unreachable()
        }
        AnotherServerResponse.Error<U>(msg) { 
            rn.assert_obj_eq<String>(msg, "Error")
        }
    }
}

type A = class {
    let x: (fn() -> u32)?

    fn init() {
        this.x = fn() -> u32 {
            return 10
        }
    }
}

type Random = class {
    let x: u32[]?

    fn init(mut x: u32[]?) {
        this.x = x
    }
}

fn test_case_nullable_function_calls(rn: TestUnit) {
    // Test with a non-null function
    let f: (fn() -> u32)? = fn() -> u32 {
        return 1
    }

    match f {
        null {
            rn.assert_unreachable()  // Shouldn't be null here
        }
        fn_val {
            let result = fn_val!()
            rn.assert_eq<u32>(result, 1)
        }
    }

    // Test with null function
    let g: (fn() -> u32)? = null

    match g {
        null {
            rn.assert_reachable()  // It should be null here
        }
        fn_val {
            rn.assert_unreachable()
        }
    }

    // Test nullable function within a class


    let a = new A()

    match a.x {
        null {
            rn.assert_unreachable()  // Shouldn't be null after init
        }
        fn_val {
            let result = fn_val!()
            rn.assert_eq<u32>(result, 10)
        }
    }

    // Test when the class function is still null
    let b = new A()
    b.x = null

    match b.x {
        null {
            rn.assert_reachable()  // Function is null here
        }
        fn_val {
            rn.assert_unreachable()  // Shouldn't reach this
        }
    }

    let y : u32[] = [1,2,3,4,5,6,7,8,9,10]
    let z: u32[]? = null
    let x: u32[] = z ?? z ?? y

    rn.assert_eq<u32>(x[0], 1)
    rn.assert_eq<u32>(x[1], 2)
    rn.assert_eq<u32>(x[2], 3)
    rn.assert_eq<u32>(x[3], 4)
    rn.assert_eq<u32>(x[4], 5)
    rn.assert_eq<u32>(x[5], 6)
    rn.assert_eq<u32>(x[6], 7)
    rn.assert_eq<u32>(x[7], 8)
    rn.assert_eq<u32>(x[8], 9)
    rn.assert_eq<u32>(x[9], 10)


    let r = new Random([4,5,6,7,8,9,10])
    let aa = (r.x ?? [1])[0]

    rn.assert_eq<u32>(aa, 4)

    let r2 = new Random(null)

    let bb = (r2.x ?? [10])[0]

    rn.assert_eq<u32>(bb, 10)



    let length1 = (new Array<u32>([1,2,3,4]) as Array<u32>? )?.length() ?? 10
    let length2 = (null as Array<u32>?)?.length() ?? 10

    rn.assert_eq(length1, 4)
    rn.assert_eq(length2, 10)
}


fn main() -> u32 {
    let test_1 = new TestUnit("test 1", "Tests array matching", test_case_1)
    let test_2 = new TestUnit("test 2", "Tests fibonacci", test_case_2)
    let test_3 = new TestUnit("test 3", "Tests variant matching", test_case_3)
    let test_4 = new TestUnit("test 4", "Tests enum matching", test_case_4)
    let test_5 = new TestUnit("test 5", "Tests array matching with destructuring", test_case_5)
    let test_6 = new TestUnit("test 6", "Tests array matching with guards", test_case_6)
    let test_7 = new TestUnit("test 7", "Tests null matching", test_case_7)
    let test_8 = new TestUnit("test 8", "Tests generic variant matching", test_case_8<u32>)
    let test_9 = new TestUnit("test 9", "Tests generic variant matching", test_case_8<i32>)
    let test_nullable = new TestUnit("test nullable function calls", "Tests nullable function calls", test_case_nullable_function_calls)

    let set = new UnitSet("STD Test 12", "Tests pattern matching expression and statements", 
                          [test_1, test_2, test_3, test_4, test_5, test_6, test_7, test_8, test_9, test_nullable])
    return set.run()
}
