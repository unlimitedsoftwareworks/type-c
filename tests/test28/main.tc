/*
 * Copyright (c) 2023-present Soulaymen Chouri
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
  * @file main.c
  * Tests Binary Operators
  * 
  * Originally made as a showcase for type-c within the play-ground
  * 
  */

from std.unit.test import TestUnit, UnitSet


/**
 * 32-bits versiob of murmur hash.
 * Type-C does not provide a single type for all numbers, instead, you will have
 * to properly convert basic types. For example:
 *  ((char2 & 0xff) << 8) => if char2 was u `u8`, the entire
 * expression will result in a u8. That is we define individual characters below
 * as u32.
 */
fn murmurHash32(key: String, seed: u32) {
    let h1 = seed
    let const remainder = key.length() & 3
    let bytes = key.length() - remainder

    let c1 = 0xcc9e2d51
    let c2 = 0x1b873593

    let i: u64 = 0

    while i < bytes {
        // we need to upcast the bytes to u32
        let char1: u32 = key.bytes()[i]
        let char2: u32 = if i+1 < bytes => key.bytes()[i+1] else 0
        let char3: u32 = if i+2 < bytes => key.bytes()[i+2] else 0
        let char4: u32 = if i+3 < bytes => key.bytes()[i+3] else 0

        let k1: u32 = (char1 & 0xff) | ((char2 & 0xff) << 8) | ((char3 & 0xff) << 16) | ((char4 & 0xff) << 24)

        i += 4

        k1 = k1 * c1
        k1 = (k1 << 15) | (k1 >> 17)
        k1 = k1 * c2

        h1 = h1 ^ k1
        h1 = (h1 << 13) | (h1 >> 19)
        h1 = (h1 * 5) + 0xe6546b64
    }

    let k1: u32 = 0

    /**
     * Sadly match breakes automatically, so match isn't the best
     * usage if you want to reuse multiple chunks
     */
    match remainder {
        3 {
            let char1: u32 = key.bytes()[i]
            let char2: u32 = key.bytes()[i+1]
            let char3: u32 = key.bytes()[i+2]

            k1 = k1 ^ (char3 & 0xff) << 16
            k1 = k1 ^ (char2 & 0xff) << 8
            k1 = k1 ^ (char1 & 0xff)
            k1 = k1 * c1
            k1 = (k1 << 15) | (k1 >> 17)
            k1 = k1 * c2
            h1 = h1 ^ k1
        }
        2 {
            let char1: u32 = key.bytes()[i]
            let char2: u32 = key.bytes()[i+1]

            k1 = k1 ^ (char2 & 0xff) << 8
            k1 = k1 ^ (char1 & 0xff)
            k1 = k1 * c1
            k1 = (k1 << 15) | (k1 >> 17)
            k1 = k1 * c2
            h1 = h1 ^ k1
        }
        1 {
            let char1: u32 = key.bytes()[i]

            k1 = k1 ^ (char1 & 0xff)
            k1 = k1 * c1
            k1 = (k1 << 15) | (k1 >> 17)
            k1 = k1 * c2
            h1 = h1 ^ k1
        }
    }

    h1 = h1 ^ (key.length() as u32)
    h1 = h1 ^ (h1 >> 16)
    h1 = h1 * 0x85ebca6b
    h1 = h1 ^ (h1 >> 13)
    h1 = h1 * 0xc2b2ae35
    h1 = h1 ^ (h1 >> 16)

    return h1
}

fn test_case_1(rn: TestUnit) {
    let h1 = murmurHash32("hello, world", 1234)
    rn.assert_eq(h1, 2566024100)

    let h2 = murmurHash32("hello, world", 12345)
    rn.assert_eq(h2, 1308528354)

    let h3 = murmurHash32("type-c", 999)
    rn.assert_eq(h3,  4070172907)

    let h4 = murmurHash32("a random string but not so random now is it?", 102957)
    rn.assert_eq(h4, 26155351)

}

fn main() -> u32 {
    let test_1 = new TestUnit("Test 1", "tests binary operators", test_case_1)
    let set = new UnitSet("STD Test 28", "Tests binary operators through a Murmurhash demo", [test_1])
    return set.run()
}
