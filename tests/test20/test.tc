
/*
from std.string import String
from std.io import println
from std.unit.test import TestUnit, UnitSet
*/

fn closureTest<T2>(y: T2) -> fn(y:T2) -> T2{
    let z: T2 = 10
    
    fn f2(x: T2) {
        return z + x
    }

    if y == 0 {
        return f2
    }
    else {
        return closureTest<T2>(y-1)
    }
}

type T = class {
    fn init(x: u32) {
    }
}

let y = closureTest(20)(10)



/*
from std.string import String
from std.io import println
from std.unit.test import TestUnit, UnitSet
*/

fn closureTest2<T2>(y: T2) -> fn(y: T2) -> T2{
    let z: T2 = [1, 2]
     fn f2(x: T2) {
        return x
    }

    if y == [0] {
        return f2
    }
    else {
        return closureTest2<T2>(y)
    }
}

let y2 = closureTest2([1, 2])([10])



fn closureTest3<T2>(y: T2) -> fn(y: T2) -> T2{
    let z: T2 = {name: 1, age: 2}
     fn f2(x: T2) {
        return x
    }

    if y.age == 0 {
        return f2
    }
    else {
        return closureTest3<T2>(y)
    }
}

let y3 = closureTest3<{name: u32, age: i32}>({1, 2})({3, 4})

fn randomF(x: {name: u32, age: i32}) {
    return x
}

randomF({1, 2})