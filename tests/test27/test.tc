/*
 * Copyright (c) 2023-present Soulaymen Chouri
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
  * @file test.c
  * Tests Join Types
  * 
  * There are two types of join:
  * 1. Interface Types
  * 2. Struct Types
  */

from std.unit.test import TestUnit, UnitSet

/**
 * Test regular structs
 */
type Point2D = {
    x: f32, y: f32
}

type Point3D = Point2D & {x: f32, z: f32}

/**
 * Tests generic structs
 */
type AbstractPoint2D<T> = struct {
    x: T, y: T
}

type AbstractPoint3D<T> = AbstractPoint2D<T> & {z: T}

fn test_case_1(rn: TestUnit) {
    let p1: Point3D = {x: 1.0f, y: 2.0f, z: 3.0f}
    rn.assert_f32_eq_pre(p1.x, 1.0f, 0.0001f)
    rn.assert_f32_eq_pre(p1.y, 2.0f, 0.0001f)
    rn.assert_f32_eq_pre(p1.z, 3.0f, 0.0001f)

    let p2: AbstractPoint3D<f32> = p1
    rn.assert_f32_eq_pre(p2.x, 1.0f, 0.0001f)
    rn.assert_f32_eq_pre(p2.y, 2.0f, 0.0001f)
    rn.assert_f32_eq_pre(p2.z, 3.0f, 0.0001f)

    let p3: AbstractPoint3D<Point3D> = {
        x: {x: 1.0f, y: 2.0f, z: 3.0f},
        y: {x: 4.0f, y: 5.0f, z: 6.0f},
        z: {x: 7.0f, y: 8.0f, z: 9.0f}
    }

    rn.assert_f32_eq_pre(p3.x.x, 1.0f, 0.0001f)
    rn.assert_f32_eq_pre(p3.x.y, 2.0f, 0.0001f)
    rn.assert_f32_eq_pre(p3.x.z, 3.0f, 0.0001f)
    rn.assert_f32_eq_pre(p3.y.x, 4.0f, 0.0001f)
    rn.assert_f32_eq_pre(p3.y.y, 5.0f, 0.0001f)
    rn.assert_f32_eq_pre(p3.y.z, 6.0f, 0.0001f)
    rn.assert_f32_eq_pre(p3.z.x, 7.0f, 0.0001f)
    rn.assert_f32_eq_pre(p3.z.y, 8.0f, 0.0001f)
    rn.assert_f32_eq_pre(p3.z.z, 9.0f, 0.0001f)
}

/**
 * Testing interface joins
 */

type Locatable<T> = interface {
    fn getLocation() -> T
}

type WithLocation = interface {
    fn getLocation() -> Point3D
}

type LocationAware<T> = Locatable<T> & WithLocation

type Some3DObject = class {
    fn init(){}
    fn getLocation() = {x: 1.0f, y: 10.0f, z: 100.0f}
}

fn test_case_2(rn: TestUnit) {
    let obj: LocationAware<Point3D> = new Some3DObject()
    let coords = obj.getLocation()

    rn.assert_f32_eq_pre(coords.x, 1.0f, 0.0001f)
    rn.assert_f32_eq_pre(coords.y, 10.0f, 0.0001f)
    rn.assert_f32_eq_pre(coords.z, 100.0f, 0.0001f)
}

fn main() {
    let test_1 = new TestUnit("Test 1", "tests struct join type", test_case_1)
    let test_2 = new TestUnit("Test 1", "tests interface join type", test_case_2)
    let set = new UnitSet("STD Test 27", "Tests Join types", [test_1, test_2])
    return set.run()
}